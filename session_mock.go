// Code generated by MockGen. DO NOT EDIT.
// Source: session.go
//
// Generated by this command:
//
//	mockgen -package=discord -source=session.go -destination=session_mock.go
//

// Package discord is a generated GoMock package.
package discord

import (
	image "image"
	io "io"
	reflect "reflect"
	time "time"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "go.uber.org/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
	isgomock struct{}
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockSession) AddHandler(handler any) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandler", handler)
	ret0, _ := ret[0].(func())
	return ret0
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockSessionMockRecorder) AddHandler(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockSession)(nil).AddHandler), handler)
}

// AddHandlerOnce mocks base method.
func (m *MockSession) AddHandlerOnce(handler any) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandlerOnce", handler)
	ret0, _ := ret[0].(func())
	return ret0
}

// AddHandlerOnce indicates an expected call of AddHandlerOnce.
func (mr *MockSessionMockRecorder) AddHandlerOnce(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandlerOnce", reflect.TypeOf((*MockSession)(nil).AddHandlerOnce), handler)
}

// ApplicationCommand mocks base method.
func (m *MockSession) ApplicationCommand(appID, guildID, cmdID string, options ...discordgo.RequestOption) (*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID, cmdID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommand", varargs...)
	ret0, _ := ret[0].(*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommand indicates an expected call of ApplicationCommand.
func (mr *MockSessionMockRecorder) ApplicationCommand(appID, guildID, cmdID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID, cmdID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommand", reflect.TypeOf((*MockSession)(nil).ApplicationCommand), varargs...)
}

// ApplicationCommandBulkOverwrite mocks base method.
func (m *MockSession) ApplicationCommandBulkOverwrite(appID, guildID string, commands []*discordgo.ApplicationCommand, options ...discordgo.RequestOption) ([]*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID, commands}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommandBulkOverwrite", varargs...)
	ret0, _ := ret[0].([]*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommandBulkOverwrite indicates an expected call of ApplicationCommandBulkOverwrite.
func (mr *MockSessionMockRecorder) ApplicationCommandBulkOverwrite(appID, guildID, commands any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID, commands}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandBulkOverwrite", reflect.TypeOf((*MockSession)(nil).ApplicationCommandBulkOverwrite), varargs...)
}

// ApplicationCommandCreate mocks base method.
func (m *MockSession) ApplicationCommandCreate(appID, guildID string, cmd *discordgo.ApplicationCommand, options ...discordgo.RequestOption) (*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID, cmd}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommandCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommandCreate indicates an expected call of ApplicationCommandCreate.
func (mr *MockSessionMockRecorder) ApplicationCommandCreate(appID, guildID, cmd any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID, cmd}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandCreate", reflect.TypeOf((*MockSession)(nil).ApplicationCommandCreate), varargs...)
}

// ApplicationCommandDelete mocks base method.
func (m *MockSession) ApplicationCommandDelete(appID, guildID, cmdID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID, cmdID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommandDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationCommandDelete indicates an expected call of ApplicationCommandDelete.
func (mr *MockSessionMockRecorder) ApplicationCommandDelete(appID, guildID, cmdID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID, cmdID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandDelete", reflect.TypeOf((*MockSession)(nil).ApplicationCommandDelete), varargs...)
}

// ApplicationCommandEdit mocks base method.
func (m *MockSession) ApplicationCommandEdit(appID, guildID, cmdID string, cmd *discordgo.ApplicationCommand, options ...discordgo.RequestOption) (*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID, cmdID, cmd}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommandEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommandEdit indicates an expected call of ApplicationCommandEdit.
func (mr *MockSessionMockRecorder) ApplicationCommandEdit(appID, guildID, cmdID, cmd any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID, cmdID, cmd}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandEdit", reflect.TypeOf((*MockSession)(nil).ApplicationCommandEdit), varargs...)
}

// ApplicationCommandPermissions mocks base method.
func (m *MockSession) ApplicationCommandPermissions(appID, guildID, cmdID string, options ...discordgo.RequestOption) (*discordgo.GuildApplicationCommandPermissions, error) {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID, cmdID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommandPermissions", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildApplicationCommandPermissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommandPermissions indicates an expected call of ApplicationCommandPermissions.
func (mr *MockSessionMockRecorder) ApplicationCommandPermissions(appID, guildID, cmdID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID, cmdID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandPermissions", reflect.TypeOf((*MockSession)(nil).ApplicationCommandPermissions), varargs...)
}

// ApplicationCommandPermissionsBatchEdit mocks base method.
func (m *MockSession) ApplicationCommandPermissionsBatchEdit(appID, guildID string, permissions []*discordgo.GuildApplicationCommandPermissions, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID, permissions}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommandPermissionsBatchEdit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationCommandPermissionsBatchEdit indicates an expected call of ApplicationCommandPermissionsBatchEdit.
func (mr *MockSessionMockRecorder) ApplicationCommandPermissionsBatchEdit(appID, guildID, permissions any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID, permissions}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandPermissionsBatchEdit", reflect.TypeOf((*MockSession)(nil).ApplicationCommandPermissionsBatchEdit), varargs...)
}

// ApplicationCommandPermissionsEdit mocks base method.
func (m *MockSession) ApplicationCommandPermissionsEdit(appID, guildID, cmdID string, permissions *discordgo.ApplicationCommandPermissionsList, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID, cmdID, permissions}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommandPermissionsEdit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationCommandPermissionsEdit indicates an expected call of ApplicationCommandPermissionsEdit.
func (mr *MockSessionMockRecorder) ApplicationCommandPermissionsEdit(appID, guildID, cmdID, permissions any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID, cmdID, permissions}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandPermissionsEdit", reflect.TypeOf((*MockSession)(nil).ApplicationCommandPermissionsEdit), varargs...)
}

// ApplicationCommands mocks base method.
func (m *MockSession) ApplicationCommands(appID, guildID string, options ...discordgo.RequestOption) ([]*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplicationCommands", varargs...)
	ret0, _ := ret[0].([]*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommands indicates an expected call of ApplicationCommands.
func (mr *MockSessionMockRecorder) ApplicationCommands(appID, guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommands", reflect.TypeOf((*MockSession)(nil).ApplicationCommands), varargs...)
}

// ApplicationRoleConnectionMetadata mocks base method.
func (m *MockSession) ApplicationRoleConnectionMetadata(appID string) ([]*discordgo.ApplicationRoleConnectionMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationRoleConnectionMetadata", appID)
	ret0, _ := ret[0].([]*discordgo.ApplicationRoleConnectionMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationRoleConnectionMetadata indicates an expected call of ApplicationRoleConnectionMetadata.
func (mr *MockSessionMockRecorder) ApplicationRoleConnectionMetadata(appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationRoleConnectionMetadata", reflect.TypeOf((*MockSession)(nil).ApplicationRoleConnectionMetadata), appID)
}

// ApplicationRoleConnectionMetadataUpdate mocks base method.
func (m *MockSession) ApplicationRoleConnectionMetadataUpdate(appID string, metadata []*discordgo.ApplicationRoleConnectionMetadata) ([]*discordgo.ApplicationRoleConnectionMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationRoleConnectionMetadataUpdate", appID, metadata)
	ret0, _ := ret[0].([]*discordgo.ApplicationRoleConnectionMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationRoleConnectionMetadataUpdate indicates an expected call of ApplicationRoleConnectionMetadataUpdate.
func (mr *MockSessionMockRecorder) ApplicationRoleConnectionMetadataUpdate(appID, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationRoleConnectionMetadataUpdate", reflect.TypeOf((*MockSession)(nil).ApplicationRoleConnectionMetadataUpdate), appID, metadata)
}

// AutoModerationRule mocks base method.
func (m *MockSession) AutoModerationRule(guildID, ruleID string, options ...discordgo.RequestOption) (*discordgo.AutoModerationRule, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, ruleID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoModerationRule", varargs...)
	ret0, _ := ret[0].(*discordgo.AutoModerationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoModerationRule indicates an expected call of AutoModerationRule.
func (mr *MockSessionMockRecorder) AutoModerationRule(guildID, ruleID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, ruleID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoModerationRule", reflect.TypeOf((*MockSession)(nil).AutoModerationRule), varargs...)
}

// AutoModerationRuleCreate mocks base method.
func (m *MockSession) AutoModerationRuleCreate(guildID string, rule *discordgo.AutoModerationRule, options ...discordgo.RequestOption) (*discordgo.AutoModerationRule, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, rule}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoModerationRuleCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.AutoModerationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoModerationRuleCreate indicates an expected call of AutoModerationRuleCreate.
func (mr *MockSessionMockRecorder) AutoModerationRuleCreate(guildID, rule any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, rule}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoModerationRuleCreate", reflect.TypeOf((*MockSession)(nil).AutoModerationRuleCreate), varargs...)
}

// AutoModerationRuleDelete mocks base method.
func (m *MockSession) AutoModerationRuleDelete(guildID, ruleID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, ruleID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoModerationRuleDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoModerationRuleDelete indicates an expected call of AutoModerationRuleDelete.
func (mr *MockSessionMockRecorder) AutoModerationRuleDelete(guildID, ruleID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, ruleID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoModerationRuleDelete", reflect.TypeOf((*MockSession)(nil).AutoModerationRuleDelete), varargs...)
}

// AutoModerationRuleEdit mocks base method.
func (m *MockSession) AutoModerationRuleEdit(guildID, ruleID string, rule *discordgo.AutoModerationRule, options ...discordgo.RequestOption) (*discordgo.AutoModerationRule, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, ruleID, rule}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoModerationRuleEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.AutoModerationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoModerationRuleEdit indicates an expected call of AutoModerationRuleEdit.
func (mr *MockSessionMockRecorder) AutoModerationRuleEdit(guildID, ruleID, rule any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, ruleID, rule}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoModerationRuleEdit", reflect.TypeOf((*MockSession)(nil).AutoModerationRuleEdit), varargs...)
}

// AutoModerationRules mocks base method.
func (m *MockSession) AutoModerationRules(guildID string, options ...discordgo.RequestOption) ([]*discordgo.AutoModerationRule, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoModerationRules", varargs...)
	ret0, _ := ret[0].([]*discordgo.AutoModerationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoModerationRules indicates an expected call of AutoModerationRules.
func (mr *MockSessionMockRecorder) AutoModerationRules(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoModerationRules", reflect.TypeOf((*MockSession)(nil).AutoModerationRules), varargs...)
}

// Channel mocks base method.
func (m *MockSession) Channel(channelID string, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Channel", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel.
func (mr *MockSessionMockRecorder) Channel(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockSession)(nil).Channel), varargs...)
}

// ChannelDelete mocks base method.
func (m *MockSession) ChannelDelete(channelID string, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelDelete", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelDelete indicates an expected call of ChannelDelete.
func (mr *MockSessionMockRecorder) ChannelDelete(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelDelete", reflect.TypeOf((*MockSession)(nil).ChannelDelete), varargs...)
}

// ChannelEdit mocks base method.
func (m *MockSession) ChannelEdit(channelID string, data *discordgo.ChannelEdit, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelEdit indicates an expected call of ChannelEdit.
func (mr *MockSessionMockRecorder) ChannelEdit(channelID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelEdit", reflect.TypeOf((*MockSession)(nil).ChannelEdit), varargs...)
}

// ChannelEditComplex mocks base method.
func (m *MockSession) ChannelEditComplex(channelID string, data *discordgo.ChannelEdit, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelEditComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelEditComplex indicates an expected call of ChannelEditComplex.
func (mr *MockSessionMockRecorder) ChannelEditComplex(channelID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelEditComplex", reflect.TypeOf((*MockSession)(nil).ChannelEditComplex), varargs...)
}

// ChannelFileSend mocks base method.
func (m *MockSession) ChannelFileSend(channelID, name string, r io.Reader, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, name, r}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelFileSend", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelFileSend indicates an expected call of ChannelFileSend.
func (mr *MockSessionMockRecorder) ChannelFileSend(channelID, name, r any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, name, r}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelFileSend", reflect.TypeOf((*MockSession)(nil).ChannelFileSend), varargs...)
}

// ChannelFileSendWithMessage mocks base method.
func (m *MockSession) ChannelFileSendWithMessage(channelID, content, name string, r io.Reader, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, content, name, r}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelFileSendWithMessage", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelFileSendWithMessage indicates an expected call of ChannelFileSendWithMessage.
func (mr *MockSessionMockRecorder) ChannelFileSendWithMessage(channelID, content, name, r any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, content, name, r}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelFileSendWithMessage", reflect.TypeOf((*MockSession)(nil).ChannelFileSendWithMessage), varargs...)
}

// ChannelInviteCreate mocks base method.
func (m *MockSession) ChannelInviteCreate(channelID string, i discordgo.Invite, options ...discordgo.RequestOption) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, i}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelInviteCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelInviteCreate indicates an expected call of ChannelInviteCreate.
func (mr *MockSessionMockRecorder) ChannelInviteCreate(channelID, i any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, i}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelInviteCreate", reflect.TypeOf((*MockSession)(nil).ChannelInviteCreate), varargs...)
}

// ChannelInvites mocks base method.
func (m *MockSession) ChannelInvites(channelID string, options ...discordgo.RequestOption) ([]*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelInvites", varargs...)
	ret0, _ := ret[0].([]*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelInvites indicates an expected call of ChannelInvites.
func (mr *MockSessionMockRecorder) ChannelInvites(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelInvites", reflect.TypeOf((*MockSession)(nil).ChannelInvites), varargs...)
}

// ChannelMessage mocks base method.
func (m *MockSession) ChannelMessage(channelID, messageID string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessage", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessage indicates an expected call of ChannelMessage.
func (mr *MockSessionMockRecorder) ChannelMessage(channelID, messageID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessage", reflect.TypeOf((*MockSession)(nil).ChannelMessage), varargs...)
}

// ChannelMessageCrosspost mocks base method.
func (m *MockSession) ChannelMessageCrosspost(channelID, messageID string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageCrosspost", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageCrosspost indicates an expected call of ChannelMessageCrosspost.
func (mr *MockSessionMockRecorder) ChannelMessageCrosspost(channelID, messageID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageCrosspost", reflect.TypeOf((*MockSession)(nil).ChannelMessageCrosspost), varargs...)
}

// ChannelMessageDelete mocks base method.
func (m *MockSession) ChannelMessageDelete(channelID, messageID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessageDelete indicates an expected call of ChannelMessageDelete.
func (mr *MockSessionMockRecorder) ChannelMessageDelete(channelID, messageID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageDelete", reflect.TypeOf((*MockSession)(nil).ChannelMessageDelete), varargs...)
}

// ChannelMessageEdit mocks base method.
func (m *MockSession) ChannelMessageEdit(channelID, messageID, content string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, content}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageEdit indicates an expected call of ChannelMessageEdit.
func (mr *MockSessionMockRecorder) ChannelMessageEdit(channelID, messageID, content any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, content}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageEdit", reflect.TypeOf((*MockSession)(nil).ChannelMessageEdit), varargs...)
}

// ChannelMessageEditComplex mocks base method.
func (m_2 *MockSession) ChannelMessageEditComplex(m *discordgo.MessageEdit, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m_2.ctrl.T.Helper()
	varargs := []any{m}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "ChannelMessageEditComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageEditComplex indicates an expected call of ChannelMessageEditComplex.
func (mr *MockSessionMockRecorder) ChannelMessageEditComplex(m any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{m}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageEditComplex", reflect.TypeOf((*MockSession)(nil).ChannelMessageEditComplex), varargs...)
}

// ChannelMessageEditEmbed mocks base method.
func (m *MockSession) ChannelMessageEditEmbed(channelID, messageID string, embed *discordgo.MessageEmbed, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, embed}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageEditEmbed", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageEditEmbed indicates an expected call of ChannelMessageEditEmbed.
func (mr *MockSessionMockRecorder) ChannelMessageEditEmbed(channelID, messageID, embed any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, embed}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageEditEmbed", reflect.TypeOf((*MockSession)(nil).ChannelMessageEditEmbed), varargs...)
}

// ChannelMessageEditEmbeds mocks base method.
func (m *MockSession) ChannelMessageEditEmbeds(channelID, messageID string, embeds []*discordgo.MessageEmbed, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, embeds}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageEditEmbeds", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageEditEmbeds indicates an expected call of ChannelMessageEditEmbeds.
func (mr *MockSessionMockRecorder) ChannelMessageEditEmbeds(channelID, messageID, embeds any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, embeds}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageEditEmbeds", reflect.TypeOf((*MockSession)(nil).ChannelMessageEditEmbeds), varargs...)
}

// ChannelMessagePin mocks base method.
func (m *MockSession) ChannelMessagePin(channelID, messageID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessagePin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessagePin indicates an expected call of ChannelMessagePin.
func (mr *MockSessionMockRecorder) ChannelMessagePin(channelID, messageID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessagePin", reflect.TypeOf((*MockSession)(nil).ChannelMessagePin), varargs...)
}

// ChannelMessageSend mocks base method.
func (m *MockSession) ChannelMessageSend(channelID, content string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, content}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSend", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSend indicates an expected call of ChannelMessageSend.
func (mr *MockSessionMockRecorder) ChannelMessageSend(channelID, content any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, content}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSend", reflect.TypeOf((*MockSession)(nil).ChannelMessageSend), varargs...)
}

// ChannelMessageSendComplex mocks base method.
func (m *MockSession) ChannelMessageSendComplex(channelID string, data *discordgo.MessageSend, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSendComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendComplex indicates an expected call of ChannelMessageSendComplex.
func (mr *MockSessionMockRecorder) ChannelMessageSendComplex(channelID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendComplex", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendComplex), varargs...)
}

// ChannelMessageSendEmbed mocks base method.
func (m *MockSession) ChannelMessageSendEmbed(channelID string, embed *discordgo.MessageEmbed, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, embed}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSendEmbed", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendEmbed indicates an expected call of ChannelMessageSendEmbed.
func (mr *MockSessionMockRecorder) ChannelMessageSendEmbed(channelID, embed any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, embed}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendEmbed", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendEmbed), varargs...)
}

// ChannelMessageSendEmbedReply mocks base method.
func (m *MockSession) ChannelMessageSendEmbedReply(channelID string, embed *discordgo.MessageEmbed, reference *discordgo.MessageReference, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, embed, reference}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSendEmbedReply", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendEmbedReply indicates an expected call of ChannelMessageSendEmbedReply.
func (mr *MockSessionMockRecorder) ChannelMessageSendEmbedReply(channelID, embed, reference any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, embed, reference}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendEmbedReply", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendEmbedReply), varargs...)
}

// ChannelMessageSendEmbeds mocks base method.
func (m *MockSession) ChannelMessageSendEmbeds(channelID string, embeds []*discordgo.MessageEmbed, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, embeds}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSendEmbeds", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendEmbeds indicates an expected call of ChannelMessageSendEmbeds.
func (mr *MockSessionMockRecorder) ChannelMessageSendEmbeds(channelID, embeds any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, embeds}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendEmbeds", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendEmbeds), varargs...)
}

// ChannelMessageSendEmbedsReply mocks base method.
func (m *MockSession) ChannelMessageSendEmbedsReply(channelID string, embeds []*discordgo.MessageEmbed, reference *discordgo.MessageReference, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, embeds, reference}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSendEmbedsReply", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendEmbedsReply indicates an expected call of ChannelMessageSendEmbedsReply.
func (mr *MockSessionMockRecorder) ChannelMessageSendEmbedsReply(channelID, embeds, reference any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, embeds, reference}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendEmbedsReply", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendEmbedsReply), varargs...)
}

// ChannelMessageSendReply mocks base method.
func (m *MockSession) ChannelMessageSendReply(channelID, content string, reference *discordgo.MessageReference, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, content, reference}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSendReply", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendReply indicates an expected call of ChannelMessageSendReply.
func (mr *MockSessionMockRecorder) ChannelMessageSendReply(channelID, content, reference any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, content, reference}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendReply", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendReply), varargs...)
}

// ChannelMessageSendTTS mocks base method.
func (m *MockSession) ChannelMessageSendTTS(channelID, content string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, content}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageSendTTS", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendTTS indicates an expected call of ChannelMessageSendTTS.
func (mr *MockSessionMockRecorder) ChannelMessageSendTTS(channelID, content any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, content}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendTTS", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendTTS), varargs...)
}

// ChannelMessageUnpin mocks base method.
func (m *MockSession) ChannelMessageUnpin(channelID, messageID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessageUnpin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessageUnpin indicates an expected call of ChannelMessageUnpin.
func (mr *MockSessionMockRecorder) ChannelMessageUnpin(channelID, messageID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageUnpin", reflect.TypeOf((*MockSession)(nil).ChannelMessageUnpin), varargs...)
}

// ChannelMessages mocks base method.
func (m *MockSession) ChannelMessages(channelID string, limit int, beforeID, afterID, aroundID string, options ...discordgo.RequestOption) ([]*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, limit, beforeID, afterID, aroundID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessages", varargs...)
	ret0, _ := ret[0].([]*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessages indicates an expected call of ChannelMessages.
func (mr *MockSessionMockRecorder) ChannelMessages(channelID, limit, beforeID, afterID, aroundID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, limit, beforeID, afterID, aroundID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessages", reflect.TypeOf((*MockSession)(nil).ChannelMessages), varargs...)
}

// ChannelMessagesBulkDelete mocks base method.
func (m *MockSession) ChannelMessagesBulkDelete(channelID string, messages []string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messages}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessagesBulkDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessagesBulkDelete indicates an expected call of ChannelMessagesBulkDelete.
func (mr *MockSessionMockRecorder) ChannelMessagesBulkDelete(channelID, messages any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messages}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessagesBulkDelete", reflect.TypeOf((*MockSession)(nil).ChannelMessagesBulkDelete), varargs...)
}

// ChannelMessagesPinned mocks base method.
func (m *MockSession) ChannelMessagesPinned(channelID string, options ...discordgo.RequestOption) ([]*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelMessagesPinned", varargs...)
	ret0, _ := ret[0].([]*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessagesPinned indicates an expected call of ChannelMessagesPinned.
func (mr *MockSessionMockRecorder) ChannelMessagesPinned(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessagesPinned", reflect.TypeOf((*MockSession)(nil).ChannelMessagesPinned), varargs...)
}

// ChannelNewsFollow mocks base method.
func (m *MockSession) ChannelNewsFollow(channelID, targetID string, options ...discordgo.RequestOption) (*discordgo.ChannelFollow, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, targetID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelNewsFollow", varargs...)
	ret0, _ := ret[0].(*discordgo.ChannelFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelNewsFollow indicates an expected call of ChannelNewsFollow.
func (mr *MockSessionMockRecorder) ChannelNewsFollow(channelID, targetID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, targetID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelNewsFollow", reflect.TypeOf((*MockSession)(nil).ChannelNewsFollow), varargs...)
}

// ChannelPermissionDelete mocks base method.
func (m *MockSession) ChannelPermissionDelete(channelID, targetID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, targetID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelPermissionDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelPermissionDelete indicates an expected call of ChannelPermissionDelete.
func (mr *MockSessionMockRecorder) ChannelPermissionDelete(channelID, targetID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, targetID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelPermissionDelete", reflect.TypeOf((*MockSession)(nil).ChannelPermissionDelete), varargs...)
}

// ChannelPermissionSet mocks base method.
func (m *MockSession) ChannelPermissionSet(channelID, targetID string, targetType discordgo.PermissionOverwriteType, allow, deny int64, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, targetID, targetType, allow, deny}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelPermissionSet", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelPermissionSet indicates an expected call of ChannelPermissionSet.
func (mr *MockSessionMockRecorder) ChannelPermissionSet(channelID, targetID, targetType, allow, deny any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, targetID, targetType, allow, deny}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelPermissionSet", reflect.TypeOf((*MockSession)(nil).ChannelPermissionSet), varargs...)
}

// ChannelTyping mocks base method.
func (m *MockSession) ChannelTyping(channelID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelTyping", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelTyping indicates an expected call of ChannelTyping.
func (mr *MockSessionMockRecorder) ChannelTyping(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelTyping", reflect.TypeOf((*MockSession)(nil).ChannelTyping), varargs...)
}

// ChannelVoiceJoin mocks base method.
func (m *MockSession) ChannelVoiceJoin(gID, cID string, mute, deaf bool) (*discordgo.VoiceConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelVoiceJoin", gID, cID, mute, deaf)
	ret0, _ := ret[0].(*discordgo.VoiceConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelVoiceJoin indicates an expected call of ChannelVoiceJoin.
func (mr *MockSessionMockRecorder) ChannelVoiceJoin(gID, cID, mute, deaf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelVoiceJoin", reflect.TypeOf((*MockSession)(nil).ChannelVoiceJoin), gID, cID, mute, deaf)
}

// ChannelVoiceJoinManual mocks base method.
func (m *MockSession) ChannelVoiceJoinManual(gID, cID string, mute, deaf bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelVoiceJoinManual", gID, cID, mute, deaf)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelVoiceJoinManual indicates an expected call of ChannelVoiceJoinManual.
func (mr *MockSessionMockRecorder) ChannelVoiceJoinManual(gID, cID, mute, deaf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelVoiceJoinManual", reflect.TypeOf((*MockSession)(nil).ChannelVoiceJoinManual), gID, cID, mute, deaf)
}

// ChannelWebhooks mocks base method.
func (m *MockSession) ChannelWebhooks(channelID string, options ...discordgo.RequestOption) ([]*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChannelWebhooks", varargs...)
	ret0, _ := ret[0].([]*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelWebhooks indicates an expected call of ChannelWebhooks.
func (mr *MockSessionMockRecorder) ChannelWebhooks(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelWebhooks", reflect.TypeOf((*MockSession)(nil).ChannelWebhooks), varargs...)
}

// Close mocks base method.
func (m *MockSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// CloseWithCode mocks base method.
func (m *MockSession) CloseWithCode(closeCode int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWithCode", closeCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWithCode indicates an expected call of CloseWithCode.
func (mr *MockSessionMockRecorder) CloseWithCode(closeCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWithCode", reflect.TypeOf((*MockSession)(nil).CloseWithCode), closeCode)
}

// FollowupMessageCreate mocks base method.
func (m *MockSession) FollowupMessageCreate(interaction *discordgo.Interaction, wait bool, data *discordgo.WebhookParams, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{interaction, wait, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowupMessageCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowupMessageCreate indicates an expected call of FollowupMessageCreate.
func (mr *MockSessionMockRecorder) FollowupMessageCreate(interaction, wait, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, wait, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowupMessageCreate", reflect.TypeOf((*MockSession)(nil).FollowupMessageCreate), varargs...)
}

// FollowupMessageDelete mocks base method.
func (m *MockSession) FollowupMessageDelete(interaction *discordgo.Interaction, messageID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{interaction, messageID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowupMessageDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FollowupMessageDelete indicates an expected call of FollowupMessageDelete.
func (mr *MockSessionMockRecorder) FollowupMessageDelete(interaction, messageID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, messageID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowupMessageDelete", reflect.TypeOf((*MockSession)(nil).FollowupMessageDelete), varargs...)
}

// FollowupMessageEdit mocks base method.
func (m *MockSession) FollowupMessageEdit(interaction *discordgo.Interaction, messageID string, data *discordgo.WebhookEdit, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{interaction, messageID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowupMessageEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowupMessageEdit indicates an expected call of FollowupMessageEdit.
func (mr *MockSessionMockRecorder) FollowupMessageEdit(interaction, messageID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, messageID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowupMessageEdit", reflect.TypeOf((*MockSession)(nil).FollowupMessageEdit), varargs...)
}

// ForumThreadStart mocks base method.
func (m *MockSession) ForumThreadStart(channelID, name string, archiveDuration int, content string, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, name, archiveDuration, content}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForumThreadStart", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForumThreadStart indicates an expected call of ForumThreadStart.
func (mr *MockSessionMockRecorder) ForumThreadStart(channelID, name, archiveDuration, content any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, name, archiveDuration, content}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForumThreadStart", reflect.TypeOf((*MockSession)(nil).ForumThreadStart), varargs...)
}

// ForumThreadStartComplex mocks base method.
func (m *MockSession) ForumThreadStartComplex(channelID string, threadData *discordgo.ThreadStart, messageData *discordgo.MessageSend, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, threadData, messageData}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForumThreadStartComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForumThreadStartComplex indicates an expected call of ForumThreadStartComplex.
func (mr *MockSessionMockRecorder) ForumThreadStartComplex(channelID, threadData, messageData any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, threadData, messageData}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForumThreadStartComplex", reflect.TypeOf((*MockSession)(nil).ForumThreadStartComplex), varargs...)
}

// ForumThreadStartEmbed mocks base method.
func (m *MockSession) ForumThreadStartEmbed(channelID, name string, archiveDuration int, embed *discordgo.MessageEmbed, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, name, archiveDuration, embed}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForumThreadStartEmbed", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForumThreadStartEmbed indicates an expected call of ForumThreadStartEmbed.
func (mr *MockSessionMockRecorder) ForumThreadStartEmbed(channelID, name, archiveDuration, embed any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, name, archiveDuration, embed}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForumThreadStartEmbed", reflect.TypeOf((*MockSession)(nil).ForumThreadStartEmbed), varargs...)
}

// ForumThreadStartEmbeds mocks base method.
func (m *MockSession) ForumThreadStartEmbeds(channelID, name string, archiveDuration int, embeds []*discordgo.MessageEmbed, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, name, archiveDuration, embeds}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ForumThreadStartEmbeds", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForumThreadStartEmbeds indicates an expected call of ForumThreadStartEmbeds.
func (mr *MockSessionMockRecorder) ForumThreadStartEmbeds(channelID, name, archiveDuration, embeds any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, name, archiveDuration, embeds}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForumThreadStartEmbeds", reflect.TypeOf((*MockSession)(nil).ForumThreadStartEmbeds), varargs...)
}

// Gateway mocks base method.
func (m *MockSession) Gateway(options ...discordgo.RequestOption) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Gateway", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gateway indicates an expected call of Gateway.
func (mr *MockSessionMockRecorder) Gateway(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gateway", reflect.TypeOf((*MockSession)(nil).Gateway), options...)
}

// GatewayBot mocks base method.
func (m *MockSession) GatewayBot(options ...discordgo.RequestOption) (*discordgo.GatewayBotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GatewayBot", varargs...)
	ret0, _ := ret[0].(*discordgo.GatewayBotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GatewayBot indicates an expected call of GatewayBot.
func (mr *MockSessionMockRecorder) GatewayBot(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatewayBot", reflect.TypeOf((*MockSession)(nil).GatewayBot), options...)
}

// Guild mocks base method.
func (m *MockSession) Guild(guildID string, options ...discordgo.RequestOption) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Guild", varargs...)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Guild indicates an expected call of Guild.
func (mr *MockSessionMockRecorder) Guild(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Guild", reflect.TypeOf((*MockSession)(nil).Guild), varargs...)
}

// GuildApplicationCommandsPermissions mocks base method.
func (m *MockSession) GuildApplicationCommandsPermissions(appID, guildID string, options ...discordgo.RequestOption) ([]*discordgo.GuildApplicationCommandPermissions, error) {
	m.ctrl.T.Helper()
	varargs := []any{appID, guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildApplicationCommandsPermissions", varargs...)
	ret0, _ := ret[0].([]*discordgo.GuildApplicationCommandPermissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildApplicationCommandsPermissions indicates an expected call of GuildApplicationCommandsPermissions.
func (mr *MockSessionMockRecorder) GuildApplicationCommandsPermissions(appID, guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{appID, guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildApplicationCommandsPermissions", reflect.TypeOf((*MockSession)(nil).GuildApplicationCommandsPermissions), varargs...)
}

// GuildAuditLog mocks base method.
func (m *MockSession) GuildAuditLog(guildID, userID, beforeID string, actionType, limit int, options ...discordgo.RequestOption) (*discordgo.GuildAuditLog, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, beforeID, actionType, limit}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildAuditLog", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildAuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildAuditLog indicates an expected call of GuildAuditLog.
func (mr *MockSessionMockRecorder) GuildAuditLog(guildID, userID, beforeID, actionType, limit any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, beforeID, actionType, limit}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildAuditLog", reflect.TypeOf((*MockSession)(nil).GuildAuditLog), varargs...)
}

// GuildBan mocks base method.
func (m *MockSession) GuildBan(guildID, userID string, options ...discordgo.RequestOption) (*discordgo.GuildBan, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildBan", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildBan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildBan indicates an expected call of GuildBan.
func (mr *MockSessionMockRecorder) GuildBan(guildID, userID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildBan", reflect.TypeOf((*MockSession)(nil).GuildBan), varargs...)
}

// GuildBanCreate mocks base method.
func (m *MockSession) GuildBanCreate(guildID, userID string, days int, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, days}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildBanCreate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildBanCreate indicates an expected call of GuildBanCreate.
func (mr *MockSessionMockRecorder) GuildBanCreate(guildID, userID, days any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, days}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildBanCreate", reflect.TypeOf((*MockSession)(nil).GuildBanCreate), varargs...)
}

// GuildBanCreateWithReason mocks base method.
func (m *MockSession) GuildBanCreateWithReason(guildID, userID, reason string, days int, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, reason, days}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildBanCreateWithReason", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildBanCreateWithReason indicates an expected call of GuildBanCreateWithReason.
func (mr *MockSessionMockRecorder) GuildBanCreateWithReason(guildID, userID, reason, days any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, reason, days}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildBanCreateWithReason", reflect.TypeOf((*MockSession)(nil).GuildBanCreateWithReason), varargs...)
}

// GuildBanDelete mocks base method.
func (m *MockSession) GuildBanDelete(guildID, userID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildBanDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildBanDelete indicates an expected call of GuildBanDelete.
func (mr *MockSessionMockRecorder) GuildBanDelete(guildID, userID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildBanDelete", reflect.TypeOf((*MockSession)(nil).GuildBanDelete), varargs...)
}

// GuildBans mocks base method.
func (m *MockSession) GuildBans(guildID string, limit int, beforeID, afterID string, options ...discordgo.RequestOption) ([]*discordgo.GuildBan, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, limit, beforeID, afterID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildBans", varargs...)
	ret0, _ := ret[0].([]*discordgo.GuildBan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildBans indicates an expected call of GuildBans.
func (mr *MockSessionMockRecorder) GuildBans(guildID, limit, beforeID, afterID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, limit, beforeID, afterID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildBans", reflect.TypeOf((*MockSession)(nil).GuildBans), varargs...)
}

// GuildChannelCreate mocks base method.
func (m *MockSession) GuildChannelCreate(guildID, name string, ctype discordgo.ChannelType, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, name, ctype}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildChannelCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildChannelCreate indicates an expected call of GuildChannelCreate.
func (mr *MockSessionMockRecorder) GuildChannelCreate(guildID, name, ctype any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, name, ctype}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannelCreate", reflect.TypeOf((*MockSession)(nil).GuildChannelCreate), varargs...)
}

// GuildChannelCreateComplex mocks base method.
func (m *MockSession) GuildChannelCreateComplex(guildID string, data discordgo.GuildChannelCreateData, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildChannelCreateComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildChannelCreateComplex indicates an expected call of GuildChannelCreateComplex.
func (mr *MockSessionMockRecorder) GuildChannelCreateComplex(guildID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannelCreateComplex", reflect.TypeOf((*MockSession)(nil).GuildChannelCreateComplex), varargs...)
}

// GuildChannels mocks base method.
func (m *MockSession) GuildChannels(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildChannels", varargs...)
	ret0, _ := ret[0].([]*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildChannels indicates an expected call of GuildChannels.
func (mr *MockSessionMockRecorder) GuildChannels(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannels", reflect.TypeOf((*MockSession)(nil).GuildChannels), varargs...)
}

// GuildChannelsReorder mocks base method.
func (m *MockSession) GuildChannelsReorder(guildID string, channels []*discordgo.Channel, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, channels}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildChannelsReorder", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildChannelsReorder indicates an expected call of GuildChannelsReorder.
func (mr *MockSessionMockRecorder) GuildChannelsReorder(guildID, channels any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, channels}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannelsReorder", reflect.TypeOf((*MockSession)(nil).GuildChannelsReorder), varargs...)
}

// GuildCreate mocks base method.
func (m *MockSession) GuildCreate(name string, options ...discordgo.RequestOption) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildCreate indicates an expected call of GuildCreate.
func (mr *MockSessionMockRecorder) GuildCreate(name any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildCreate", reflect.TypeOf((*MockSession)(nil).GuildCreate), varargs...)
}

// GuildCreateWithTemplate mocks base method.
func (m *MockSession) GuildCreateWithTemplate(templateCode, name, icon string, options ...discordgo.RequestOption) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	varargs := []any{templateCode, name, icon}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildCreateWithTemplate", varargs...)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildCreateWithTemplate indicates an expected call of GuildCreateWithTemplate.
func (mr *MockSessionMockRecorder) GuildCreateWithTemplate(templateCode, name, icon any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{templateCode, name, icon}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildCreateWithTemplate", reflect.TypeOf((*MockSession)(nil).GuildCreateWithTemplate), varargs...)
}

// GuildDelete mocks base method.
func (m *MockSession) GuildDelete(guildID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildDelete indicates an expected call of GuildDelete.
func (mr *MockSessionMockRecorder) GuildDelete(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildDelete", reflect.TypeOf((*MockSession)(nil).GuildDelete), varargs...)
}

// GuildEdit mocks base method.
func (m *MockSession) GuildEdit(guildID string, g *discordgo.GuildParams, options ...discordgo.RequestOption) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, g}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEdit indicates an expected call of GuildEdit.
func (mr *MockSessionMockRecorder) GuildEdit(guildID, g any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, g}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEdit", reflect.TypeOf((*MockSession)(nil).GuildEdit), varargs...)
}

// GuildEmbed mocks base method.
func (m *MockSession) GuildEmbed(guildID string, options ...discordgo.RequestOption) (*discordgo.GuildEmbed, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildEmbed", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildEmbed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEmbed indicates an expected call of GuildEmbed.
func (mr *MockSessionMockRecorder) GuildEmbed(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmbed", reflect.TypeOf((*MockSession)(nil).GuildEmbed), varargs...)
}

// GuildEmbedEdit mocks base method.
func (m *MockSession) GuildEmbedEdit(guildID string, data *discordgo.GuildEmbed, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildEmbedEdit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildEmbedEdit indicates an expected call of GuildEmbedEdit.
func (mr *MockSessionMockRecorder) GuildEmbedEdit(guildID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmbedEdit", reflect.TypeOf((*MockSession)(nil).GuildEmbedEdit), varargs...)
}

// GuildEmoji mocks base method.
func (m *MockSession) GuildEmoji(guildID, emojiID string, options ...discordgo.RequestOption) (*discordgo.Emoji, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, emojiID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildEmoji", varargs...)
	ret0, _ := ret[0].(*discordgo.Emoji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEmoji indicates an expected call of GuildEmoji.
func (mr *MockSessionMockRecorder) GuildEmoji(guildID, emojiID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, emojiID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmoji", reflect.TypeOf((*MockSession)(nil).GuildEmoji), varargs...)
}

// GuildEmojiCreate mocks base method.
func (m *MockSession) GuildEmojiCreate(guildID string, data *discordgo.EmojiParams, options ...discordgo.RequestOption) (*discordgo.Emoji, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildEmojiCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Emoji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEmojiCreate indicates an expected call of GuildEmojiCreate.
func (mr *MockSessionMockRecorder) GuildEmojiCreate(guildID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmojiCreate", reflect.TypeOf((*MockSession)(nil).GuildEmojiCreate), varargs...)
}

// GuildEmojiDelete mocks base method.
func (m *MockSession) GuildEmojiDelete(guildID, emojiID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, emojiID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildEmojiDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildEmojiDelete indicates an expected call of GuildEmojiDelete.
func (mr *MockSessionMockRecorder) GuildEmojiDelete(guildID, emojiID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, emojiID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmojiDelete", reflect.TypeOf((*MockSession)(nil).GuildEmojiDelete), varargs...)
}

// GuildEmojiEdit mocks base method.
func (m *MockSession) GuildEmojiEdit(guildID, emojiID string, data *discordgo.EmojiParams, options ...discordgo.RequestOption) (*discordgo.Emoji, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, emojiID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildEmojiEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Emoji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEmojiEdit indicates an expected call of GuildEmojiEdit.
func (mr *MockSessionMockRecorder) GuildEmojiEdit(guildID, emojiID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, emojiID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmojiEdit", reflect.TypeOf((*MockSession)(nil).GuildEmojiEdit), varargs...)
}

// GuildEmojis mocks base method.
func (m *MockSession) GuildEmojis(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Emoji, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildEmojis", varargs...)
	ret0, _ := ret[0].([]*discordgo.Emoji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEmojis indicates an expected call of GuildEmojis.
func (mr *MockSessionMockRecorder) GuildEmojis(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmojis", reflect.TypeOf((*MockSession)(nil).GuildEmojis), varargs...)
}

// GuildIcon mocks base method.
func (m *MockSession) GuildIcon(guildID string, options ...discordgo.RequestOption) (image.Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildIcon", varargs...)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildIcon indicates an expected call of GuildIcon.
func (mr *MockSessionMockRecorder) GuildIcon(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildIcon", reflect.TypeOf((*MockSession)(nil).GuildIcon), varargs...)
}

// GuildIntegrationCreate mocks base method.
func (m *MockSession) GuildIntegrationCreate(guildID, integrationType, integrationID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, integrationType, integrationID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildIntegrationCreate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildIntegrationCreate indicates an expected call of GuildIntegrationCreate.
func (mr *MockSessionMockRecorder) GuildIntegrationCreate(guildID, integrationType, integrationID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, integrationType, integrationID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildIntegrationCreate", reflect.TypeOf((*MockSession)(nil).GuildIntegrationCreate), varargs...)
}

// GuildIntegrationDelete mocks base method.
func (m *MockSession) GuildIntegrationDelete(guildID, integrationID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, integrationID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildIntegrationDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildIntegrationDelete indicates an expected call of GuildIntegrationDelete.
func (mr *MockSessionMockRecorder) GuildIntegrationDelete(guildID, integrationID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, integrationID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildIntegrationDelete", reflect.TypeOf((*MockSession)(nil).GuildIntegrationDelete), varargs...)
}

// GuildIntegrationEdit mocks base method.
func (m *MockSession) GuildIntegrationEdit(guildID, integrationID string, expireBehavior, expireGracePeriod int, enableEmoticons bool, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, integrationID, expireBehavior, expireGracePeriod, enableEmoticons}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildIntegrationEdit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildIntegrationEdit indicates an expected call of GuildIntegrationEdit.
func (mr *MockSessionMockRecorder) GuildIntegrationEdit(guildID, integrationID, expireBehavior, expireGracePeriod, enableEmoticons any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, integrationID, expireBehavior, expireGracePeriod, enableEmoticons}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildIntegrationEdit", reflect.TypeOf((*MockSession)(nil).GuildIntegrationEdit), varargs...)
}

// GuildIntegrations mocks base method.
func (m *MockSession) GuildIntegrations(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Integration, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildIntegrations", varargs...)
	ret0, _ := ret[0].([]*discordgo.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildIntegrations indicates an expected call of GuildIntegrations.
func (mr *MockSessionMockRecorder) GuildIntegrations(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildIntegrations", reflect.TypeOf((*MockSession)(nil).GuildIntegrations), varargs...)
}

// GuildInvites mocks base method.
func (m *MockSession) GuildInvites(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildInvites", varargs...)
	ret0, _ := ret[0].([]*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildInvites indicates an expected call of GuildInvites.
func (mr *MockSessionMockRecorder) GuildInvites(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildInvites", reflect.TypeOf((*MockSession)(nil).GuildInvites), varargs...)
}

// GuildLeave mocks base method.
func (m *MockSession) GuildLeave(guildID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildLeave", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildLeave indicates an expected call of GuildLeave.
func (mr *MockSessionMockRecorder) GuildLeave(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildLeave", reflect.TypeOf((*MockSession)(nil).GuildLeave), varargs...)
}

// GuildMember mocks base method.
func (m *MockSession) GuildMember(guildID, userID string, options ...discordgo.RequestOption) (*discordgo.Member, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMember", varargs...)
	ret0, _ := ret[0].(*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMember indicates an expected call of GuildMember.
func (mr *MockSessionMockRecorder) GuildMember(guildID, userID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMember", reflect.TypeOf((*MockSession)(nil).GuildMember), varargs...)
}

// GuildMemberAdd mocks base method.
func (m *MockSession) GuildMemberAdd(guildID, userID string, data *discordgo.GuildMemberAddParams, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberAdd indicates an expected call of GuildMemberAdd.
func (mr *MockSessionMockRecorder) GuildMemberAdd(guildID, userID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberAdd", reflect.TypeOf((*MockSession)(nil).GuildMemberAdd), varargs...)
}

// GuildMemberDeafen mocks base method.
func (m *MockSession) GuildMemberDeafen(guildID, userID string, deaf bool, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, deaf}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberDeafen", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberDeafen indicates an expected call of GuildMemberDeafen.
func (mr *MockSessionMockRecorder) GuildMemberDeafen(guildID, userID, deaf any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, deaf}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberDeafen", reflect.TypeOf((*MockSession)(nil).GuildMemberDeafen), varargs...)
}

// GuildMemberDelete mocks base method.
func (m *MockSession) GuildMemberDelete(guildID, userID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberDelete indicates an expected call of GuildMemberDelete.
func (mr *MockSessionMockRecorder) GuildMemberDelete(guildID, userID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberDelete", reflect.TypeOf((*MockSession)(nil).GuildMemberDelete), varargs...)
}

// GuildMemberDeleteWithReason mocks base method.
func (m *MockSession) GuildMemberDeleteWithReason(guildID, userID, reason string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, reason}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberDeleteWithReason", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberDeleteWithReason indicates an expected call of GuildMemberDeleteWithReason.
func (mr *MockSessionMockRecorder) GuildMemberDeleteWithReason(guildID, userID, reason any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, reason}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberDeleteWithReason", reflect.TypeOf((*MockSession)(nil).GuildMemberDeleteWithReason), varargs...)
}

// GuildMemberEdit mocks base method.
func (m *MockSession) GuildMemberEdit(guildID, userID string, data *discordgo.GuildMemberParams, options ...discordgo.RequestOption) (*discordgo.Member, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMemberEdit indicates an expected call of GuildMemberEdit.
func (mr *MockSessionMockRecorder) GuildMemberEdit(guildID, userID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberEdit", reflect.TypeOf((*MockSession)(nil).GuildMemberEdit), varargs...)
}

// GuildMemberEditComplex mocks base method.
func (m *MockSession) GuildMemberEditComplex(guildID, userID string, data *discordgo.GuildMemberParams, options ...discordgo.RequestOption) (*discordgo.Member, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberEditComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMemberEditComplex indicates an expected call of GuildMemberEditComplex.
func (mr *MockSessionMockRecorder) GuildMemberEditComplex(guildID, userID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberEditComplex", reflect.TypeOf((*MockSession)(nil).GuildMemberEditComplex), varargs...)
}

// GuildMemberMove mocks base method.
func (m *MockSession) GuildMemberMove(guildID, userID string, channelID *string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberMove", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberMove indicates an expected call of GuildMemberMove.
func (mr *MockSessionMockRecorder) GuildMemberMove(guildID, userID, channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberMove", reflect.TypeOf((*MockSession)(nil).GuildMemberMove), varargs...)
}

// GuildMemberMute mocks base method.
func (m *MockSession) GuildMemberMute(guildID, userID string, mute bool, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, mute}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberMute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberMute indicates an expected call of GuildMemberMute.
func (mr *MockSessionMockRecorder) GuildMemberMute(guildID, userID, mute any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, mute}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberMute", reflect.TypeOf((*MockSession)(nil).GuildMemberMute), varargs...)
}

// GuildMemberNickname mocks base method.
func (m *MockSession) GuildMemberNickname(guildID, userID, nickname string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, nickname}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberNickname", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberNickname indicates an expected call of GuildMemberNickname.
func (mr *MockSessionMockRecorder) GuildMemberNickname(guildID, userID, nickname any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, nickname}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberNickname", reflect.TypeOf((*MockSession)(nil).GuildMemberNickname), varargs...)
}

// GuildMemberRoleAdd mocks base method.
func (m *MockSession) GuildMemberRoleAdd(guildID, userID, roleID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, roleID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberRoleAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberRoleAdd indicates an expected call of GuildMemberRoleAdd.
func (mr *MockSessionMockRecorder) GuildMemberRoleAdd(guildID, userID, roleID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, roleID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberRoleAdd", reflect.TypeOf((*MockSession)(nil).GuildMemberRoleAdd), varargs...)
}

// GuildMemberRoleRemove mocks base method.
func (m *MockSession) GuildMemberRoleRemove(guildID, userID, roleID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, roleID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberRoleRemove", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberRoleRemove indicates an expected call of GuildMemberRoleRemove.
func (mr *MockSessionMockRecorder) GuildMemberRoleRemove(guildID, userID, roleID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, roleID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberRoleRemove", reflect.TypeOf((*MockSession)(nil).GuildMemberRoleRemove), varargs...)
}

// GuildMemberTimeout mocks base method.
func (m *MockSession) GuildMemberTimeout(guildID, userID string, until *time.Time, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userID, until}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMemberTimeout", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberTimeout indicates an expected call of GuildMemberTimeout.
func (mr *MockSessionMockRecorder) GuildMemberTimeout(guildID, userID, until any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userID, until}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberTimeout", reflect.TypeOf((*MockSession)(nil).GuildMemberTimeout), varargs...)
}

// GuildMembers mocks base method.
func (m *MockSession) GuildMembers(guildID, after string, limit int, options ...discordgo.RequestOption) ([]*discordgo.Member, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, after, limit}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMembers", varargs...)
	ret0, _ := ret[0].([]*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMembers indicates an expected call of GuildMembers.
func (mr *MockSessionMockRecorder) GuildMembers(guildID, after, limit any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, after, limit}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMembers", reflect.TypeOf((*MockSession)(nil).GuildMembers), varargs...)
}

// GuildMembersSearch mocks base method.
func (m *MockSession) GuildMembersSearch(guildID, query string, limit int, options ...discordgo.RequestOption) ([]*discordgo.Member, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, query, limit}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildMembersSearch", varargs...)
	ret0, _ := ret[0].([]*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMembersSearch indicates an expected call of GuildMembersSearch.
func (mr *MockSessionMockRecorder) GuildMembersSearch(guildID, query, limit any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, query, limit}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMembersSearch", reflect.TypeOf((*MockSession)(nil).GuildMembersSearch), varargs...)
}

// GuildPreview mocks base method.
func (m *MockSession) GuildPreview(guildID string, options ...discordgo.RequestOption) (*discordgo.GuildPreview, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildPreview", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildPreview indicates an expected call of GuildPreview.
func (mr *MockSessionMockRecorder) GuildPreview(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildPreview", reflect.TypeOf((*MockSession)(nil).GuildPreview), varargs...)
}

// GuildPrune mocks base method.
func (m *MockSession) GuildPrune(guildID string, days uint32, options ...discordgo.RequestOption) (uint32, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, days}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildPrune", varargs...)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildPrune indicates an expected call of GuildPrune.
func (mr *MockSessionMockRecorder) GuildPrune(guildID, days any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, days}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildPrune", reflect.TypeOf((*MockSession)(nil).GuildPrune), varargs...)
}

// GuildPruneCount mocks base method.
func (m *MockSession) GuildPruneCount(guildID string, days uint32, options ...discordgo.RequestOption) (uint32, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, days}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildPruneCount", varargs...)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildPruneCount indicates an expected call of GuildPruneCount.
func (mr *MockSessionMockRecorder) GuildPruneCount(guildID, days any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, days}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildPruneCount", reflect.TypeOf((*MockSession)(nil).GuildPruneCount), varargs...)
}

// GuildRoleCreate mocks base method.
func (m *MockSession) GuildRoleCreate(guildID string, data *discordgo.RoleParams, options ...discordgo.RequestOption) (*discordgo.Role, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildRoleCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildRoleCreate indicates an expected call of GuildRoleCreate.
func (mr *MockSessionMockRecorder) GuildRoleCreate(guildID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoleCreate", reflect.TypeOf((*MockSession)(nil).GuildRoleCreate), varargs...)
}

// GuildRoleDelete mocks base method.
func (m *MockSession) GuildRoleDelete(guildID, roleID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, roleID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildRoleDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildRoleDelete indicates an expected call of GuildRoleDelete.
func (mr *MockSessionMockRecorder) GuildRoleDelete(guildID, roleID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, roleID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoleDelete", reflect.TypeOf((*MockSession)(nil).GuildRoleDelete), varargs...)
}

// GuildRoleEdit mocks base method.
func (m *MockSession) GuildRoleEdit(guildID, roleID string, data *discordgo.RoleParams, options ...discordgo.RequestOption) (*discordgo.Role, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, roleID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildRoleEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildRoleEdit indicates an expected call of GuildRoleEdit.
func (mr *MockSessionMockRecorder) GuildRoleEdit(guildID, roleID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, roleID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoleEdit", reflect.TypeOf((*MockSession)(nil).GuildRoleEdit), varargs...)
}

// GuildRoleReorder mocks base method.
func (m *MockSession) GuildRoleReorder(guildID string, roles []*discordgo.Role, options ...discordgo.RequestOption) ([]*discordgo.Role, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, roles}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildRoleReorder", varargs...)
	ret0, _ := ret[0].([]*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildRoleReorder indicates an expected call of GuildRoleReorder.
func (mr *MockSessionMockRecorder) GuildRoleReorder(guildID, roles any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, roles}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoleReorder", reflect.TypeOf((*MockSession)(nil).GuildRoleReorder), varargs...)
}

// GuildRoles mocks base method.
func (m *MockSession) GuildRoles(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Role, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildRoles", varargs...)
	ret0, _ := ret[0].([]*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildRoles indicates an expected call of GuildRoles.
func (mr *MockSessionMockRecorder) GuildRoles(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoles", reflect.TypeOf((*MockSession)(nil).GuildRoles), varargs...)
}

// GuildScheduledEvent mocks base method.
func (m *MockSession) GuildScheduledEvent(guildID, eventID string, userCount bool, options ...discordgo.RequestOption) (*discordgo.GuildScheduledEvent, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, eventID, userCount}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildScheduledEvent", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildScheduledEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEvent indicates an expected call of GuildScheduledEvent.
func (mr *MockSessionMockRecorder) GuildScheduledEvent(guildID, eventID, userCount any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, eventID, userCount}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEvent", reflect.TypeOf((*MockSession)(nil).GuildScheduledEvent), varargs...)
}

// GuildScheduledEventCreate mocks base method.
func (m *MockSession) GuildScheduledEventCreate(guildID string, event *discordgo.GuildScheduledEventParams, options ...discordgo.RequestOption) (*discordgo.GuildScheduledEvent, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildScheduledEventCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildScheduledEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEventCreate indicates an expected call of GuildScheduledEventCreate.
func (mr *MockSessionMockRecorder) GuildScheduledEventCreate(guildID, event any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, event}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEventCreate", reflect.TypeOf((*MockSession)(nil).GuildScheduledEventCreate), varargs...)
}

// GuildScheduledEventDelete mocks base method.
func (m *MockSession) GuildScheduledEventDelete(guildID, eventID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, eventID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildScheduledEventDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildScheduledEventDelete indicates an expected call of GuildScheduledEventDelete.
func (mr *MockSessionMockRecorder) GuildScheduledEventDelete(guildID, eventID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, eventID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEventDelete", reflect.TypeOf((*MockSession)(nil).GuildScheduledEventDelete), varargs...)
}

// GuildScheduledEventEdit mocks base method.
func (m *MockSession) GuildScheduledEventEdit(guildID, eventID string, event *discordgo.GuildScheduledEventParams, options ...discordgo.RequestOption) (*discordgo.GuildScheduledEvent, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, eventID, event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildScheduledEventEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildScheduledEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEventEdit indicates an expected call of GuildScheduledEventEdit.
func (mr *MockSessionMockRecorder) GuildScheduledEventEdit(guildID, eventID, event any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, eventID, event}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEventEdit", reflect.TypeOf((*MockSession)(nil).GuildScheduledEventEdit), varargs...)
}

// GuildScheduledEventUsers mocks base method.
func (m *MockSession) GuildScheduledEventUsers(guildID, eventID string, limit int, withMember bool, beforeID, afterID string, options ...discordgo.RequestOption) ([]*discordgo.GuildScheduledEventUser, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, eventID, limit, withMember, beforeID, afterID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildScheduledEventUsers", varargs...)
	ret0, _ := ret[0].([]*discordgo.GuildScheduledEventUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEventUsers indicates an expected call of GuildScheduledEventUsers.
func (mr *MockSessionMockRecorder) GuildScheduledEventUsers(guildID, eventID, limit, withMember, beforeID, afterID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, eventID, limit, withMember, beforeID, afterID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEventUsers", reflect.TypeOf((*MockSession)(nil).GuildScheduledEventUsers), varargs...)
}

// GuildScheduledEvents mocks base method.
func (m *MockSession) GuildScheduledEvents(guildID string, userCount bool, options ...discordgo.RequestOption) ([]*discordgo.GuildScheduledEvent, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, userCount}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildScheduledEvents", varargs...)
	ret0, _ := ret[0].([]*discordgo.GuildScheduledEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEvents indicates an expected call of GuildScheduledEvents.
func (mr *MockSessionMockRecorder) GuildScheduledEvents(guildID, userCount any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, userCount}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEvents", reflect.TypeOf((*MockSession)(nil).GuildScheduledEvents), varargs...)
}

// GuildSplash mocks base method.
func (m *MockSession) GuildSplash(guildID string, options ...discordgo.RequestOption) (image.Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildSplash", varargs...)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildSplash indicates an expected call of GuildSplash.
func (mr *MockSessionMockRecorder) GuildSplash(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildSplash", reflect.TypeOf((*MockSession)(nil).GuildSplash), varargs...)
}

// GuildTemplate mocks base method.
func (m *MockSession) GuildTemplate(templateCode string, options ...discordgo.RequestOption) (*discordgo.GuildTemplate, error) {
	m.ctrl.T.Helper()
	varargs := []any{templateCode}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildTemplate", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildTemplate indicates an expected call of GuildTemplate.
func (mr *MockSessionMockRecorder) GuildTemplate(templateCode any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{templateCode}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplate", reflect.TypeOf((*MockSession)(nil).GuildTemplate), varargs...)
}

// GuildTemplateCreate mocks base method.
func (m *MockSession) GuildTemplateCreate(guildID string, data *discordgo.GuildTemplateParams, options ...discordgo.RequestOption) *discordgo.GuildTemplate {
	m.ctrl.T.Helper()
	varargs := []any{guildID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildTemplateCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildTemplate)
	return ret0
}

// GuildTemplateCreate indicates an expected call of GuildTemplateCreate.
func (mr *MockSessionMockRecorder) GuildTemplateCreate(guildID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplateCreate", reflect.TypeOf((*MockSession)(nil).GuildTemplateCreate), varargs...)
}

// GuildTemplateDelete mocks base method.
func (m *MockSession) GuildTemplateDelete(guildID, templateCode string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, templateCode}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildTemplateDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildTemplateDelete indicates an expected call of GuildTemplateDelete.
func (mr *MockSessionMockRecorder) GuildTemplateDelete(guildID, templateCode any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, templateCode}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplateDelete", reflect.TypeOf((*MockSession)(nil).GuildTemplateDelete), varargs...)
}

// GuildTemplateEdit mocks base method.
func (m *MockSession) GuildTemplateEdit(guildID, templateCode string, data *discordgo.GuildTemplateParams, options ...discordgo.RequestOption) (*discordgo.GuildTemplate, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID, templateCode, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildTemplateEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.GuildTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildTemplateEdit indicates an expected call of GuildTemplateEdit.
func (mr *MockSessionMockRecorder) GuildTemplateEdit(guildID, templateCode, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, templateCode, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplateEdit", reflect.TypeOf((*MockSession)(nil).GuildTemplateEdit), varargs...)
}

// GuildTemplateSync mocks base method.
func (m *MockSession) GuildTemplateSync(guildID, templateCode string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{guildID, templateCode}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildTemplateSync", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildTemplateSync indicates an expected call of GuildTemplateSync.
func (mr *MockSessionMockRecorder) GuildTemplateSync(guildID, templateCode any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID, templateCode}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplateSync", reflect.TypeOf((*MockSession)(nil).GuildTemplateSync), varargs...)
}

// GuildTemplates mocks base method.
func (m *MockSession) GuildTemplates(guildID string, options ...discordgo.RequestOption) ([]*discordgo.GuildTemplate, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildTemplates", varargs...)
	ret0, _ := ret[0].([]*discordgo.GuildTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildTemplates indicates an expected call of GuildTemplates.
func (mr *MockSessionMockRecorder) GuildTemplates(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplates", reflect.TypeOf((*MockSession)(nil).GuildTemplates), varargs...)
}

// GuildThreadsActive mocks base method.
func (m *MockSession) GuildThreadsActive(guildID string, options ...discordgo.RequestOption) (*discordgo.ThreadsList, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildThreadsActive", varargs...)
	ret0, _ := ret[0].(*discordgo.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildThreadsActive indicates an expected call of GuildThreadsActive.
func (mr *MockSessionMockRecorder) GuildThreadsActive(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildThreadsActive", reflect.TypeOf((*MockSession)(nil).GuildThreadsActive), varargs...)
}

// GuildWebhooks mocks base method.
func (m *MockSession) GuildWebhooks(guildID string, options ...discordgo.RequestOption) ([]*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildWebhooks", varargs...)
	ret0, _ := ret[0].([]*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildWebhooks indicates an expected call of GuildWebhooks.
func (mr *MockSessionMockRecorder) GuildWebhooks(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildWebhooks", reflect.TypeOf((*MockSession)(nil).GuildWebhooks), varargs...)
}

// GuildWithCounts mocks base method.
func (m *MockSession) GuildWithCounts(guildID string, options ...discordgo.RequestOption) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuildWithCounts", varargs...)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildWithCounts indicates an expected call of GuildWithCounts.
func (mr *MockSessionMockRecorder) GuildWithCounts(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildWithCounts", reflect.TypeOf((*MockSession)(nil).GuildWithCounts), varargs...)
}

// HeartbeatLatency mocks base method.
func (m *MockSession) HeartbeatLatency() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeartbeatLatency")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// HeartbeatLatency indicates an expected call of HeartbeatLatency.
func (mr *MockSessionMockRecorder) HeartbeatLatency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeartbeatLatency", reflect.TypeOf((*MockSession)(nil).HeartbeatLatency))
}

// InteractionRespond mocks base method.
func (m *MockSession) InteractionRespond(interaction *discordgo.Interaction, resp *discordgo.InteractionResponse, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{interaction, resp}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InteractionRespond", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InteractionRespond indicates an expected call of InteractionRespond.
func (mr *MockSessionMockRecorder) InteractionRespond(interaction, resp any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, resp}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionRespond", reflect.TypeOf((*MockSession)(nil).InteractionRespond), varargs...)
}

// InteractionResponse mocks base method.
func (m *MockSession) InteractionResponse(interaction *discordgo.Interaction, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{interaction}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InteractionResponse", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InteractionResponse indicates an expected call of InteractionResponse.
func (mr *MockSessionMockRecorder) InteractionResponse(interaction any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionResponse", reflect.TypeOf((*MockSession)(nil).InteractionResponse), varargs...)
}

// InteractionResponseDelete mocks base method.
func (m *MockSession) InteractionResponseDelete(interaction *discordgo.Interaction, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{interaction}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InteractionResponseDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InteractionResponseDelete indicates an expected call of InteractionResponseDelete.
func (mr *MockSessionMockRecorder) InteractionResponseDelete(interaction any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionResponseDelete", reflect.TypeOf((*MockSession)(nil).InteractionResponseDelete), varargs...)
}

// InteractionResponseEdit mocks base method.
func (m *MockSession) InteractionResponseEdit(interaction *discordgo.Interaction, newresp *discordgo.WebhookEdit, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{interaction, newresp}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InteractionResponseEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InteractionResponseEdit indicates an expected call of InteractionResponseEdit.
func (mr *MockSessionMockRecorder) InteractionResponseEdit(interaction, newresp any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{interaction, newresp}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionResponseEdit", reflect.TypeOf((*MockSession)(nil).InteractionResponseEdit), varargs...)
}

// Invite mocks base method.
func (m *MockSession) Invite(inviteID string, options ...discordgo.RequestOption) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	varargs := []any{inviteID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invite", varargs...)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invite indicates an expected call of Invite.
func (mr *MockSessionMockRecorder) Invite(inviteID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{inviteID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invite", reflect.TypeOf((*MockSession)(nil).Invite), varargs...)
}

// InviteAccept mocks base method.
func (m *MockSession) InviteAccept(inviteID string, options ...discordgo.RequestOption) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	varargs := []any{inviteID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteAccept", varargs...)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteAccept indicates an expected call of InviteAccept.
func (mr *MockSessionMockRecorder) InviteAccept(inviteID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{inviteID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteAccept", reflect.TypeOf((*MockSession)(nil).InviteAccept), varargs...)
}

// InviteComplex mocks base method.
func (m *MockSession) InviteComplex(inviteID, guildScheduledEventID string, withCounts, withExpiration bool, options ...discordgo.RequestOption) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	varargs := []any{inviteID, guildScheduledEventID, withCounts, withExpiration}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteComplex indicates an expected call of InviteComplex.
func (mr *MockSessionMockRecorder) InviteComplex(inviteID, guildScheduledEventID, withCounts, withExpiration any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{inviteID, guildScheduledEventID, withCounts, withExpiration}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteComplex", reflect.TypeOf((*MockSession)(nil).InviteComplex), varargs...)
}

// InviteDelete mocks base method.
func (m *MockSession) InviteDelete(inviteID string, options ...discordgo.RequestOption) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	varargs := []any{inviteID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteDelete", varargs...)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteDelete indicates an expected call of InviteDelete.
func (mr *MockSessionMockRecorder) InviteDelete(inviteID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{inviteID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteDelete", reflect.TypeOf((*MockSession)(nil).InviteDelete), varargs...)
}

// InviteWithCounts mocks base method.
func (m *MockSession) InviteWithCounts(inviteID string, options ...discordgo.RequestOption) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	varargs := []any{inviteID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteWithCounts", varargs...)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteWithCounts indicates an expected call of InviteWithCounts.
func (mr *MockSessionMockRecorder) InviteWithCounts(inviteID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{inviteID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteWithCounts", reflect.TypeOf((*MockSession)(nil).InviteWithCounts), varargs...)
}

// MessageReactionAdd mocks base method.
func (m *MockSession) MessageReactionAdd(channelID, messageID, emojiID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, emojiID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageReactionAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionAdd indicates an expected call of MessageReactionAdd.
func (mr *MockSessionMockRecorder) MessageReactionAdd(channelID, messageID, emojiID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, emojiID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionAdd", reflect.TypeOf((*MockSession)(nil).MessageReactionAdd), varargs...)
}

// MessageReactionRemove mocks base method.
func (m *MockSession) MessageReactionRemove(channelID, messageID, emojiID, userID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, emojiID, userID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageReactionRemove", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionRemove indicates an expected call of MessageReactionRemove.
func (mr *MockSessionMockRecorder) MessageReactionRemove(channelID, messageID, emojiID, userID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, emojiID, userID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionRemove", reflect.TypeOf((*MockSession)(nil).MessageReactionRemove), varargs...)
}

// MessageReactions mocks base method.
func (m *MockSession) MessageReactions(channelID, messageID, emojiID string, limit int, beforeID, afterID string, options ...discordgo.RequestOption) ([]*discordgo.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, emojiID, limit, beforeID, afterID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageReactions", varargs...)
	ret0, _ := ret[0].([]*discordgo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageReactions indicates an expected call of MessageReactions.
func (mr *MockSessionMockRecorder) MessageReactions(channelID, messageID, emojiID, limit, beforeID, afterID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, emojiID, limit, beforeID, afterID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactions", reflect.TypeOf((*MockSession)(nil).MessageReactions), varargs...)
}

// MessageReactionsRemoveAll mocks base method.
func (m *MockSession) MessageReactionsRemoveAll(channelID, messageID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageReactionsRemoveAll", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionsRemoveAll indicates an expected call of MessageReactionsRemoveAll.
func (mr *MockSessionMockRecorder) MessageReactionsRemoveAll(channelID, messageID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionsRemoveAll", reflect.TypeOf((*MockSession)(nil).MessageReactionsRemoveAll), varargs...)
}

// MessageReactionsRemoveEmoji mocks base method.
func (m *MockSession) MessageReactionsRemoveEmoji(channelID, messageID, emojiID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, emojiID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageReactionsRemoveEmoji", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionsRemoveEmoji indicates an expected call of MessageReactionsRemoveEmoji.
func (mr *MockSessionMockRecorder) MessageReactionsRemoveEmoji(channelID, messageID, emojiID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, emojiID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionsRemoveEmoji", reflect.TypeOf((*MockSession)(nil).MessageReactionsRemoveEmoji), varargs...)
}

// MessageThreadStart mocks base method.
func (m *MockSession) MessageThreadStart(channelID, messageID, name string, archiveDuration int, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, name, archiveDuration}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageThreadStart", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageThreadStart indicates an expected call of MessageThreadStart.
func (mr *MockSessionMockRecorder) MessageThreadStart(channelID, messageID, name, archiveDuration any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, name, archiveDuration}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageThreadStart", reflect.TypeOf((*MockSession)(nil).MessageThreadStart), varargs...)
}

// MessageThreadStartComplex mocks base method.
func (m *MockSession) MessageThreadStartComplex(channelID, messageID string, data *discordgo.ThreadStart, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, messageID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageThreadStartComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageThreadStartComplex indicates an expected call of MessageThreadStartComplex.
func (mr *MockSessionMockRecorder) MessageThreadStartComplex(channelID, messageID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, messageID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageThreadStartComplex", reflect.TypeOf((*MockSession)(nil).MessageThreadStartComplex), varargs...)
}

// Open mocks base method.
func (m *MockSession) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockSessionMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSession)(nil).Open))
}

// Request mocks base method.
func (m *MockSession) Request(method, urlStr string, data any, options ...discordgo.RequestOption) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{method, urlStr, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Request", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockSessionMockRecorder) Request(method, urlStr, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{method, urlStr, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockSession)(nil).Request), varargs...)
}

// RequestGuildMembers mocks base method.
func (m *MockSession) RequestGuildMembers(guildID, query string, limit int, nonce string, presences bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestGuildMembers", guildID, query, limit, nonce, presences)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestGuildMembers indicates an expected call of RequestGuildMembers.
func (mr *MockSessionMockRecorder) RequestGuildMembers(guildID, query, limit, nonce, presences any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestGuildMembers", reflect.TypeOf((*MockSession)(nil).RequestGuildMembers), guildID, query, limit, nonce, presences)
}

// RequestGuildMembersBatch mocks base method.
func (m *MockSession) RequestGuildMembersBatch(guildIDs []string, query string, limit int, nonce string, presences bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestGuildMembersBatch", guildIDs, query, limit, nonce, presences)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestGuildMembersBatch indicates an expected call of RequestGuildMembersBatch.
func (mr *MockSessionMockRecorder) RequestGuildMembersBatch(guildIDs, query, limit, nonce, presences any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestGuildMembersBatch", reflect.TypeOf((*MockSession)(nil).RequestGuildMembersBatch), guildIDs, query, limit, nonce, presences)
}

// RequestGuildMembersBatchList mocks base method.
func (m *MockSession) RequestGuildMembersBatchList(guildIDs, userIDs []string, limit int, nonce string, presences bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestGuildMembersBatchList", guildIDs, userIDs, limit, nonce, presences)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestGuildMembersBatchList indicates an expected call of RequestGuildMembersBatchList.
func (mr *MockSessionMockRecorder) RequestGuildMembersBatchList(guildIDs, userIDs, limit, nonce, presences any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestGuildMembersBatchList", reflect.TypeOf((*MockSession)(nil).RequestGuildMembersBatchList), guildIDs, userIDs, limit, nonce, presences)
}

// RequestGuildMembersList mocks base method.
func (m *MockSession) RequestGuildMembersList(guildID string, userIDs []string, limit int, nonce string, presences bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestGuildMembersList", guildID, userIDs, limit, nonce, presences)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestGuildMembersList indicates an expected call of RequestGuildMembersList.
func (mr *MockSessionMockRecorder) RequestGuildMembersList(guildID, userIDs, limit, nonce, presences any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestGuildMembersList", reflect.TypeOf((*MockSession)(nil).RequestGuildMembersList), guildID, userIDs, limit, nonce, presences)
}

// RequestWithBucketID mocks base method.
func (m *MockSession) RequestWithBucketID(method, urlStr string, data any, bucketID string, options ...discordgo.RequestOption) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{method, urlStr, data, bucketID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestWithBucketID", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWithBucketID indicates an expected call of RequestWithBucketID.
func (mr *MockSessionMockRecorder) RequestWithBucketID(method, urlStr, data, bucketID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{method, urlStr, data, bucketID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithBucketID", reflect.TypeOf((*MockSession)(nil).RequestWithBucketID), varargs...)
}

// RequestWithLockedBucket mocks base method.
func (m *MockSession) RequestWithLockedBucket(method, urlStr, contentType string, b []byte, bucket *discordgo.Bucket, sequence int, options ...discordgo.RequestOption) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{method, urlStr, contentType, b, bucket, sequence}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestWithLockedBucket", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWithLockedBucket indicates an expected call of RequestWithLockedBucket.
func (mr *MockSessionMockRecorder) RequestWithLockedBucket(method, urlStr, contentType, b, bucket, sequence any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{method, urlStr, contentType, b, bucket, sequence}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithLockedBucket", reflect.TypeOf((*MockSession)(nil).RequestWithLockedBucket), varargs...)
}

// StageInstance mocks base method.
func (m *MockSession) StageInstance(channelID string, options ...discordgo.RequestOption) (*discordgo.StageInstance, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StageInstance", varargs...)
	ret0, _ := ret[0].(*discordgo.StageInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageInstance indicates an expected call of StageInstance.
func (mr *MockSessionMockRecorder) StageInstance(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageInstance", reflect.TypeOf((*MockSession)(nil).StageInstance), varargs...)
}

// StageInstanceCreate mocks base method.
func (m *MockSession) StageInstanceCreate(data *discordgo.StageInstanceParams, options ...discordgo.RequestOption) (*discordgo.StageInstance, error) {
	m.ctrl.T.Helper()
	varargs := []any{data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StageInstanceCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.StageInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageInstanceCreate indicates an expected call of StageInstanceCreate.
func (mr *MockSessionMockRecorder) StageInstanceCreate(data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageInstanceCreate", reflect.TypeOf((*MockSession)(nil).StageInstanceCreate), varargs...)
}

// StageInstanceDelete mocks base method.
func (m *MockSession) StageInstanceDelete(channelID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StageInstanceDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StageInstanceDelete indicates an expected call of StageInstanceDelete.
func (mr *MockSessionMockRecorder) StageInstanceDelete(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageInstanceDelete", reflect.TypeOf((*MockSession)(nil).StageInstanceDelete), varargs...)
}

// StageInstanceEdit mocks base method.
func (m *MockSession) StageInstanceEdit(channelID string, data *discordgo.StageInstanceParams, options ...discordgo.RequestOption) (*discordgo.StageInstance, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StageInstanceEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.StageInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageInstanceEdit indicates an expected call of StageInstanceEdit.
func (mr *MockSessionMockRecorder) StageInstanceEdit(channelID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageInstanceEdit", reflect.TypeOf((*MockSession)(nil).StageInstanceEdit), varargs...)
}

// ThreadJoin mocks base method.
func (m *MockSession) ThreadJoin(id string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadJoin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ThreadJoin indicates an expected call of ThreadJoin.
func (mr *MockSessionMockRecorder) ThreadJoin(id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadJoin", reflect.TypeOf((*MockSession)(nil).ThreadJoin), varargs...)
}

// ThreadLeave mocks base method.
func (m *MockSession) ThreadLeave(id string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadLeave", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ThreadLeave indicates an expected call of ThreadLeave.
func (mr *MockSessionMockRecorder) ThreadLeave(id any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadLeave", reflect.TypeOf((*MockSession)(nil).ThreadLeave), varargs...)
}

// ThreadMember mocks base method.
func (m *MockSession) ThreadMember(arg0, arg1 string, arg2 bool, arg3 ...discordgo.RequestOption) (*discordgo.ThreadMember, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadMember", varargs...)
	ret0, _ := ret[0].(*discordgo.ThreadMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadMember indicates an expected call of ThreadMember.
func (mr *MockSessionMockRecorder) ThreadMember(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadMember", reflect.TypeOf((*MockSession)(nil).ThreadMember), varargs...)
}

// ThreadMemberAdd mocks base method.
func (m *MockSession) ThreadMemberAdd(threadID, memberID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{threadID, memberID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadMemberAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ThreadMemberAdd indicates an expected call of ThreadMemberAdd.
func (mr *MockSessionMockRecorder) ThreadMemberAdd(threadID, memberID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{threadID, memberID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadMemberAdd", reflect.TypeOf((*MockSession)(nil).ThreadMemberAdd), varargs...)
}

// ThreadMemberRemove mocks base method.
func (m *MockSession) ThreadMemberRemove(threadID, memberID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{threadID, memberID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadMemberRemove", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ThreadMemberRemove indicates an expected call of ThreadMemberRemove.
func (mr *MockSessionMockRecorder) ThreadMemberRemove(threadID, memberID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{threadID, memberID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadMemberRemove", reflect.TypeOf((*MockSession)(nil).ThreadMemberRemove), varargs...)
}

// ThreadMembers mocks base method.
func (m *MockSession) ThreadMembers(arg0 string, arg1 int, arg2 bool, arg3 string, arg4 ...discordgo.RequestOption) ([]*discordgo.ThreadMember, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadMembers", varargs...)
	ret0, _ := ret[0].([]*discordgo.ThreadMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadMembers indicates an expected call of ThreadMembers.
func (mr *MockSessionMockRecorder) ThreadMembers(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadMembers", reflect.TypeOf((*MockSession)(nil).ThreadMembers), varargs...)
}

// ThreadStart mocks base method.
func (m *MockSession) ThreadStart(channelID, name string, typ discordgo.ChannelType, archiveDuration int, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, name, typ, archiveDuration}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadStart", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadStart indicates an expected call of ThreadStart.
func (mr *MockSessionMockRecorder) ThreadStart(channelID, name, typ, archiveDuration any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, name, typ, archiveDuration}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadStart", reflect.TypeOf((*MockSession)(nil).ThreadStart), varargs...)
}

// ThreadStartComplex mocks base method.
func (m *MockSession) ThreadStartComplex(channelID string, data *discordgo.ThreadStart, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadStartComplex", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadStartComplex indicates an expected call of ThreadStartComplex.
func (mr *MockSessionMockRecorder) ThreadStartComplex(channelID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadStartComplex", reflect.TypeOf((*MockSession)(nil).ThreadStartComplex), varargs...)
}

// ThreadsActive mocks base method.
func (m *MockSession) ThreadsActive(channelID string, options ...discordgo.RequestOption) (*discordgo.ThreadsList, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadsActive", varargs...)
	ret0, _ := ret[0].(*discordgo.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadsActive indicates an expected call of ThreadsActive.
func (mr *MockSessionMockRecorder) ThreadsActive(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadsActive", reflect.TypeOf((*MockSession)(nil).ThreadsActive), varargs...)
}

// ThreadsArchived mocks base method.
func (m *MockSession) ThreadsArchived(channelID string, before *time.Time, limit int, options ...discordgo.RequestOption) (*discordgo.ThreadsList, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, before, limit}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadsArchived", varargs...)
	ret0, _ := ret[0].(*discordgo.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadsArchived indicates an expected call of ThreadsArchived.
func (mr *MockSessionMockRecorder) ThreadsArchived(channelID, before, limit any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, before, limit}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadsArchived", reflect.TypeOf((*MockSession)(nil).ThreadsArchived), varargs...)
}

// ThreadsPrivateArchived mocks base method.
func (m *MockSession) ThreadsPrivateArchived(channelID string, before *time.Time, limit int, options ...discordgo.RequestOption) (*discordgo.ThreadsList, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, before, limit}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadsPrivateArchived", varargs...)
	ret0, _ := ret[0].(*discordgo.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadsPrivateArchived indicates an expected call of ThreadsPrivateArchived.
func (mr *MockSessionMockRecorder) ThreadsPrivateArchived(channelID, before, limit any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, before, limit}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadsPrivateArchived", reflect.TypeOf((*MockSession)(nil).ThreadsPrivateArchived), varargs...)
}

// ThreadsPrivateJoinedArchived mocks base method.
func (m *MockSession) ThreadsPrivateJoinedArchived(channelID string, before *time.Time, limit int, options ...discordgo.RequestOption) (*discordgo.ThreadsList, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, before, limit}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadsPrivateJoinedArchived", varargs...)
	ret0, _ := ret[0].(*discordgo.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadsPrivateJoinedArchived indicates an expected call of ThreadsPrivateJoinedArchived.
func (mr *MockSessionMockRecorder) ThreadsPrivateJoinedArchived(channelID, before, limit any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, before, limit}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadsPrivateJoinedArchived", reflect.TypeOf((*MockSession)(nil).ThreadsPrivateJoinedArchived), varargs...)
}

// UpdateGameStatus mocks base method.
func (m *MockSession) UpdateGameStatus(idle int, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGameStatus", idle, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGameStatus indicates an expected call of UpdateGameStatus.
func (mr *MockSessionMockRecorder) UpdateGameStatus(idle, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGameStatus", reflect.TypeOf((*MockSession)(nil).UpdateGameStatus), idle, name)
}

// UpdateListeningStatus mocks base method.
func (m *MockSession) UpdateListeningStatus(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListeningStatus", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateListeningStatus indicates an expected call of UpdateListeningStatus.
func (mr *MockSessionMockRecorder) UpdateListeningStatus(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListeningStatus", reflect.TypeOf((*MockSession)(nil).UpdateListeningStatus), name)
}

// UpdateStatusComplex mocks base method.
func (m *MockSession) UpdateStatusComplex(usd discordgo.UpdateStatusData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusComplex", usd)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusComplex indicates an expected call of UpdateStatusComplex.
func (mr *MockSessionMockRecorder) UpdateStatusComplex(usd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusComplex", reflect.TypeOf((*MockSession)(nil).UpdateStatusComplex), usd)
}

// UpdateStreamingStatus mocks base method.
func (m *MockSession) UpdateStreamingStatus(idle int, name, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamingStatus", idle, name, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStreamingStatus indicates an expected call of UpdateStreamingStatus.
func (mr *MockSessionMockRecorder) UpdateStreamingStatus(idle, name, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamingStatus", reflect.TypeOf((*MockSession)(nil).UpdateStreamingStatus), idle, name, url)
}

// UpdateWatchStatus mocks base method.
func (m *MockSession) UpdateWatchStatus(idle int, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWatchStatus", idle, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWatchStatus indicates an expected call of UpdateWatchStatus.
func (mr *MockSessionMockRecorder) UpdateWatchStatus(idle, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWatchStatus", reflect.TypeOf((*MockSession)(nil).UpdateWatchStatus), idle, name)
}

// User mocks base method.
func (m *MockSession) User(userID string, options ...discordgo.RequestOption) (*discordgo.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{userID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "User", varargs...)
	ret0, _ := ret[0].(*discordgo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockSessionMockRecorder) User(userID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{userID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockSession)(nil).User), varargs...)
}

// UserApplicationRoleConnection mocks base method.
func (m *MockSession) UserApplicationRoleConnection(appID string) (*discordgo.ApplicationRoleConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserApplicationRoleConnection", appID)
	ret0, _ := ret[0].(*discordgo.ApplicationRoleConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserApplicationRoleConnection indicates an expected call of UserApplicationRoleConnection.
func (mr *MockSessionMockRecorder) UserApplicationRoleConnection(appID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserApplicationRoleConnection", reflect.TypeOf((*MockSession)(nil).UserApplicationRoleConnection), appID)
}

// UserApplicationRoleConnectionUpdate mocks base method.
func (m *MockSession) UserApplicationRoleConnectionUpdate(appID string, rconn *discordgo.ApplicationRoleConnection) (*discordgo.ApplicationRoleConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserApplicationRoleConnectionUpdate", appID, rconn)
	ret0, _ := ret[0].(*discordgo.ApplicationRoleConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserApplicationRoleConnectionUpdate indicates an expected call of UserApplicationRoleConnectionUpdate.
func (mr *MockSessionMockRecorder) UserApplicationRoleConnectionUpdate(appID, rconn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserApplicationRoleConnectionUpdate", reflect.TypeOf((*MockSession)(nil).UserApplicationRoleConnectionUpdate), appID, rconn)
}

// UserAvatar mocks base method.
func (m *MockSession) UserAvatar(userID string, options ...discordgo.RequestOption) (image.Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{userID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserAvatar", varargs...)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAvatar indicates an expected call of UserAvatar.
func (mr *MockSessionMockRecorder) UserAvatar(userID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{userID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAvatar", reflect.TypeOf((*MockSession)(nil).UserAvatar), varargs...)
}

// UserAvatarDecode mocks base method.
func (m *MockSession) UserAvatarDecode(u *discordgo.User, options ...discordgo.RequestOption) (image.Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{u}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserAvatarDecode", varargs...)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAvatarDecode indicates an expected call of UserAvatarDecode.
func (mr *MockSessionMockRecorder) UserAvatarDecode(u any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{u}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAvatarDecode", reflect.TypeOf((*MockSession)(nil).UserAvatarDecode), varargs...)
}

// UserChannelCreate mocks base method.
func (m *MockSession) UserChannelCreate(recipientID string, options ...discordgo.RequestOption) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	varargs := []any{recipientID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserChannelCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelCreate indicates an expected call of UserChannelCreate.
func (mr *MockSessionMockRecorder) UserChannelCreate(recipientID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{recipientID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelCreate", reflect.TypeOf((*MockSession)(nil).UserChannelCreate), varargs...)
}

// UserChannelPermissions mocks base method.
func (m *MockSession) UserChannelPermissions(userID, channelID string, fetchOptions ...discordgo.RequestOption) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{userID, channelID}
	for _, a := range fetchOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserChannelPermissions", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelPermissions indicates an expected call of UserChannelPermissions.
func (mr *MockSessionMockRecorder) UserChannelPermissions(userID, channelID any, fetchOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{userID, channelID}, fetchOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelPermissions", reflect.TypeOf((*MockSession)(nil).UserChannelPermissions), varargs...)
}

// UserConnections mocks base method.
func (m *MockSession) UserConnections(options ...discordgo.RequestOption) ([]*discordgo.UserConnection, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserConnections", varargs...)
	ret0, _ := ret[0].([]*discordgo.UserConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserConnections indicates an expected call of UserConnections.
func (mr *MockSessionMockRecorder) UserConnections(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserConnections", reflect.TypeOf((*MockSession)(nil).UserConnections), options...)
}

// UserGuildMember mocks base method.
func (m *MockSession) UserGuildMember(guildID string, options ...discordgo.RequestOption) (*discordgo.Member, error) {
	m.ctrl.T.Helper()
	varargs := []any{guildID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserGuildMember", varargs...)
	ret0, _ := ret[0].(*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGuildMember indicates an expected call of UserGuildMember.
func (mr *MockSessionMockRecorder) UserGuildMember(guildID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{guildID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGuildMember", reflect.TypeOf((*MockSession)(nil).UserGuildMember), varargs...)
}

// UserGuilds mocks base method.
func (m *MockSession) UserGuilds(arg0 int, arg1, arg2 string, arg3 bool, arg4 ...discordgo.RequestOption) ([]*discordgo.UserGuild, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserGuilds", varargs...)
	ret0, _ := ret[0].([]*discordgo.UserGuild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGuilds indicates an expected call of UserGuilds.
func (mr *MockSessionMockRecorder) UserGuilds(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGuilds", reflect.TypeOf((*MockSession)(nil).UserGuilds), varargs...)
}

// UserUpdate mocks base method.
func (m *MockSession) UserUpdate(username, avatar string, options ...discordgo.RequestOption) (*discordgo.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{username, avatar}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserUpdate", varargs...)
	ret0, _ := ret[0].(*discordgo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockSessionMockRecorder) UserUpdate(username, avatar any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{username, avatar}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockSession)(nil).UserUpdate), varargs...)
}

// VoiceRegions mocks base method.
func (m *MockSession) VoiceRegions(options ...discordgo.RequestOption) ([]*discordgo.VoiceRegion, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VoiceRegions", varargs...)
	ret0, _ := ret[0].([]*discordgo.VoiceRegion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoiceRegions indicates an expected call of VoiceRegions.
func (mr *MockSessionMockRecorder) VoiceRegions(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoiceRegions", reflect.TypeOf((*MockSession)(nil).VoiceRegions), options...)
}

// Webhook mocks base method.
func (m *MockSession) Webhook(webhookID string, options ...discordgo.RequestOption) (*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	varargs := []any{webhookID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Webhook", varargs...)
	ret0, _ := ret[0].(*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Webhook indicates an expected call of Webhook.
func (mr *MockSessionMockRecorder) Webhook(webhookID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{webhookID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Webhook", reflect.TypeOf((*MockSession)(nil).Webhook), varargs...)
}

// WebhookCreate mocks base method.
func (m *MockSession) WebhookCreate(channelID, name, avatar string, options ...discordgo.RequestOption) (*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID, name, avatar}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookCreate", varargs...)
	ret0, _ := ret[0].(*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookCreate indicates an expected call of WebhookCreate.
func (mr *MockSessionMockRecorder) WebhookCreate(channelID, name, avatar any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID, name, avatar}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookCreate", reflect.TypeOf((*MockSession)(nil).WebhookCreate), varargs...)
}

// WebhookDelete mocks base method.
func (m *MockSession) WebhookDelete(webhookID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{webhookID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WebhookDelete indicates an expected call of WebhookDelete.
func (mr *MockSessionMockRecorder) WebhookDelete(webhookID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{webhookID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookDelete", reflect.TypeOf((*MockSession)(nil).WebhookDelete), varargs...)
}

// WebhookDeleteWithToken mocks base method.
func (m *MockSession) WebhookDeleteWithToken(webhookID, token string, options ...discordgo.RequestOption) (*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	varargs := []any{webhookID, token}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookDeleteWithToken", varargs...)
	ret0, _ := ret[0].(*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookDeleteWithToken indicates an expected call of WebhookDeleteWithToken.
func (mr *MockSessionMockRecorder) WebhookDeleteWithToken(webhookID, token any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{webhookID, token}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookDeleteWithToken", reflect.TypeOf((*MockSession)(nil).WebhookDeleteWithToken), varargs...)
}

// WebhookEdit mocks base method.
func (m *MockSession) WebhookEdit(arg0, arg1, arg2, arg3 string, arg4 ...discordgo.RequestOption) (*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookEdit indicates an expected call of WebhookEdit.
func (mr *MockSessionMockRecorder) WebhookEdit(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookEdit", reflect.TypeOf((*MockSession)(nil).WebhookEdit), varargs...)
}

// WebhookEditWithToken mocks base method.
func (m *MockSession) WebhookEditWithToken(arg0, arg1, arg2, arg3 string, arg4 ...discordgo.RequestOption) (*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookEditWithToken", varargs...)
	ret0, _ := ret[0].(*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookEditWithToken indicates an expected call of WebhookEditWithToken.
func (mr *MockSessionMockRecorder) WebhookEditWithToken(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookEditWithToken", reflect.TypeOf((*MockSession)(nil).WebhookEditWithToken), varargs...)
}

// WebhookExecute mocks base method.
func (m *MockSession) WebhookExecute(webhookID, token string, wait bool, data *discordgo.WebhookParams, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{webhookID, token, wait, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookExecute", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookExecute indicates an expected call of WebhookExecute.
func (mr *MockSessionMockRecorder) WebhookExecute(webhookID, token, wait, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{webhookID, token, wait, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookExecute", reflect.TypeOf((*MockSession)(nil).WebhookExecute), varargs...)
}

// WebhookMessage mocks base method.
func (m *MockSession) WebhookMessage(webhookID, token, messageID string, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{webhookID, token, messageID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookMessage", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookMessage indicates an expected call of WebhookMessage.
func (mr *MockSessionMockRecorder) WebhookMessage(webhookID, token, messageID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{webhookID, token, messageID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookMessage", reflect.TypeOf((*MockSession)(nil).WebhookMessage), varargs...)
}

// WebhookMessageDelete mocks base method.
func (m *MockSession) WebhookMessageDelete(webhookID, token, messageID string, options ...discordgo.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{webhookID, token, messageID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookMessageDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WebhookMessageDelete indicates an expected call of WebhookMessageDelete.
func (mr *MockSessionMockRecorder) WebhookMessageDelete(webhookID, token, messageID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{webhookID, token, messageID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookMessageDelete", reflect.TypeOf((*MockSession)(nil).WebhookMessageDelete), varargs...)
}

// WebhookMessageEdit mocks base method.
func (m *MockSession) WebhookMessageEdit(webhookID, token, messageID string, data *discordgo.WebhookEdit, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{webhookID, token, messageID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookMessageEdit", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookMessageEdit indicates an expected call of WebhookMessageEdit.
func (mr *MockSessionMockRecorder) WebhookMessageEdit(webhookID, token, messageID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{webhookID, token, messageID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookMessageEdit", reflect.TypeOf((*MockSession)(nil).WebhookMessageEdit), varargs...)
}

// WebhookThreadExecute mocks base method.
func (m *MockSession) WebhookThreadExecute(webhookID, token string, wait bool, threadID string, data *discordgo.WebhookParams, options ...discordgo.RequestOption) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{webhookID, token, wait, threadID, data}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookThreadExecute", varargs...)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookThreadExecute indicates an expected call of WebhookThreadExecute.
func (mr *MockSessionMockRecorder) WebhookThreadExecute(webhookID, token, wait, threadID, data any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{webhookID, token, wait, threadID, data}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookThreadExecute", reflect.TypeOf((*MockSession)(nil).WebhookThreadExecute), varargs...)
}

// WebhookWithToken mocks base method.
func (m *MockSession) WebhookWithToken(webhookID, token string, options ...discordgo.RequestOption) (*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	varargs := []any{webhookID, token}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WebhookWithToken", varargs...)
	ret0, _ := ret[0].(*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookWithToken indicates an expected call of WebhookWithToken.
func (mr *MockSessionMockRecorder) WebhookWithToken(webhookID, token any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{webhookID, token}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookWithToken", reflect.TypeOf((*MockSession)(nil).WebhookWithToken), varargs...)
}
